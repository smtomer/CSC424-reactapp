"use strict";
/*!
This file is part of CycloneDX generator for NPM projects.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const cyclonedx_library_1 = require("@cyclonedx/cyclonedx-library");
const commander_1 = require("commander");
const fs_1 = require("fs");
const path_1 = require("path");
const builders_1 = require("./builders");
var OutputFormat;
(function (OutputFormat) {
    OutputFormat["JSON"] = "JSON";
    OutputFormat["XML"] = "XML";
})(OutputFormat || (OutputFormat = {}));
var Omittable;
(function (Omittable) {
    Omittable["Dev"] = "dev";
    Omittable["Optional"] = "optional";
    Omittable["Peer"] = "peer";
})(Omittable || (Omittable = {}));
const OutputStdOut = '-';
function makeCommand(process) {
    return new commander_1.Command().description('Create CycloneDX Software Bill of Materials (SBOM) from Node.js NPM projects.').usage('[options] [--] [<package-manifest>]').addOption(new commander_1.Option('--ignore-npm-errors', 'Whether to ignore errors of NPM.\n' +
        'This might be used, if "npm install" was run with "--force" or "--legacy-peer-deps".').default(false)).addOption(new commander_1.Option('--package-lock-only', 'Whether to only use the lock file, ignoring "node_modules".\n' +
        'This means the output will be based only on the few details in and the tree described by the "npm-shrinkwrap.json" or "package-lock.json", rather than the contents of "node_modules" directory.').default(false)).addOption(new commander_1.Option('--omit <type...>', 'Dependency types to omit from the installation tree.' +
        '(can be set multiple times)').choices(Object.values(Omittable)).default(process.env.NODE_ENV === 'production'
        ? [Omittable.Dev]
        : [], '"dev" if the NODE_ENV environment variable is set to "production", otherwise empty')).addOption(new commander_1.Option('--flatten-components', 'Whether to flatten the components.\n' +
        'This means the actual nesting of node packages is not represented in the SBOM result.').default(false)).addOption(new commander_1.Option('--short-PURLs', 'Omit all qualifiers from PackageURLs.\n' +
        'This causes information loss in trade of shorter PURLs, which might improve digesting these strings.').default(false)).addOption(new commander_1.Option('--spec-version <version>', 'Which version of CycloneDX spec to use.').choices(Object.keys(cyclonedx_library_1.Spec.SpecVersionDict)).default(cyclonedx_library_1.Spec.Version.v1dot4)).addOption(new commander_1.Option('--output-reproducible', 'Whether to go the extra mile and make the output reproducible.\n' +
        'This requires more resources, and might result in loss of time- and random-based-values.').env('BOM_REPRODUCIBLE')).addOption((function () {
        const o = new commander_1.Option('--output-format <format>', 'Which output format to use.').choices(Object.values(OutputFormat)).default(OutputFormat.JSON);
        const oldParseArg = o.parseArg ??
            (v => v);
        o.parseArg = (v, p) => oldParseArg(v.toUpperCase(), p);
        return o;
    })()).addOption(new commander_1.Option('--output-file <file>', 'Path to the output file.\n' +
        `Set to "${OutputStdOut}" to write to STDOUT.`).default(OutputStdOut, 'write to STDOUT')).addOption(new commander_1.Option('--mc-type <type>', 'Type of the main component.').choices([
        cyclonedx_library_1.Enums.ComponentType.Application,
        cyclonedx_library_1.Enums.ComponentType.Firmware,
        cyclonedx_library_1.Enums.ComponentType.Library
    ]).default(cyclonedx_library_1.Enums.ComponentType.Application)).addArgument(new commander_1.Argument('[<package-manifest>]', "Path to project's manifest file.").default('package.json', '"package.json" file in current working directory')).version(require('../package.json').version).allowExcessArguments(false);
}
function run(process) {
    process.title = 'cyclonedx-node-npm';
    const myConsole = new console.Console(process.stderr, process.stderr);
    const program = makeCommand(process);
    program.parse(process.argv);
    const options = program.opts();
    myConsole.debug('DEBUG | options: %j', options);
    const packageFile = (0, path_1.resolve)(process.cwd(), program.args[0] ?? 'package.json');
    if (!(0, fs_1.existsSync)(packageFile)) {
        throw new Error(`missing project's manifest file: ${packageFile}`);
    }
    myConsole.debug('DEBUG | packageFile: %s', packageFile);
    const projectDir = (0, path_1.dirname)(packageFile);
    myConsole.info('INFO  | projectDir: %s', projectDir);
    if ((0, fs_1.existsSync)((0, path_1.resolve)(projectDir, 'npm-shrinkwrap.json'))) {
        myConsole.debug('DEBUG | detected a npm shrinkwrap file');
    }
    else if ((0, fs_1.existsSync)((0, path_1.resolve)(projectDir, 'package-lock.json'))) {
        myConsole.debug('DEBUG | detected a package lock file');
    }
    else if (!options.packageLockOnly && (0, fs_1.existsSync)((0, path_1.resolve)(projectDir, 'node_modules'))) {
        myConsole.debug('DEBUG | detected a node_modules dir');
    }
    else {
        myConsole.log('LOG   | No evidence: no package lock file nor npm shrinkwrap file');
        if (!options.packageLockOnly) {
            myConsole.log('LOG   | No evidence: no node_modules dir');
        }
        myConsole.info('INFO  | ? Did you forget to run `npm install` on your project accordingly ?');
        throw new Error('missing evidence');
    }
    const extRefFactory = new cyclonedx_library_1.Factories.FromNodePackageJson.ExternalReferenceFactory();
    const bom = new builders_1.BomBuilder(new cyclonedx_library_1.Builders.FromNodePackageJson.ToolBuilder(extRefFactory), new cyclonedx_library_1.Builders.FromNodePackageJson.ComponentBuilder(extRefFactory, new cyclonedx_library_1.Factories.LicenseFactory()), new builders_1.TreeBuilder(), new cyclonedx_library_1.Factories.FromNodePackageJson.PackageUrlFactory('npm'), {
        ignoreNpmErrors: options.ignoreNpmErrors,
        metaComponentType: options.mcType,
        packageLockOnly: options.packageLockOnly,
        omitDependencyTypes: options.omit,
        reproducible: options.outputReproducible,
        flattenComponents: options.flattenComponents,
        shortPURLs: options.shortPURLs
    }, myConsole).buildFromProjectDir(projectDir, process);
    const spec = cyclonedx_library_1.Spec.SpecVersionDict[options.specVersion];
    if (undefined === spec) {
        throw new Error('unsupported spec-version');
    }
    let serializer;
    switch (options.outputFormat) {
        case OutputFormat.XML:
            serializer = new cyclonedx_library_1.Serialize.XmlSerializer(new cyclonedx_library_1.Serialize.XML.Normalize.Factory(spec));
            break;
        case OutputFormat.JSON:
            serializer = new cyclonedx_library_1.Serialize.JsonSerializer(new cyclonedx_library_1.Serialize.JSON.Normalize.Factory(spec));
            break;
    }
    myConsole.log('LOG   | writing BOM to', options.outputFile);
    (0, fs_1.writeSync)(options.outputFile === OutputStdOut
        ? process.stdout.fd
        : (0, fs_1.openSync)((0, path_1.resolve)(process.cwd(), options.outputFile), 'w'), serializer.serialize(bom, {
        sortLists: options.outputReproducible,
        space: 2
    }));
}
exports.run = run;
//# sourceMappingURL=cli.js.map