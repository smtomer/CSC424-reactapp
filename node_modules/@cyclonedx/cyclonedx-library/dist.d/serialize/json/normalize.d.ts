/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
import type { SortableIterable } from '../../_helpers/sortable';
import * as Models from '../../models';
import type { Protocol as Spec } from '../../spec';
import type { NormalizerOptions } from '../types';
import type { Normalized } from './types';
export declare class Factory {
    #private;
    constructor(spec: Factory['spec']);
    get spec(): Spec;
    makeForBom(): BomNormalizer;
    makeForMetadata(): MetadataNormalizer;
    makeForComponent(): ComponentNormalizer;
    makeForTool(): ToolNormalizer;
    makeForOrganizationalContact(): OrganizationalContactNormalizer;
    makeForOrganizationalEntity(): OrganizationalEntityNormalizer;
    makeForHash(): HashNormalizer;
    makeForLicense(): LicenseNormalizer;
    makeForSWID(): SWIDNormalizer;
    makeForExternalReference(): ExternalReferenceNormalizer;
    makeForAttachment(): AttachmentNormalizer;
    makeForProperty(): PropertyNormalizer;
    makeForDependencyGraph(): DependencyGraphNormalizer;
}
interface JsonNormalizer<TModel, TNormalized> {
    normalize: (data: TModel, options: NormalizerOptions) => TNormalized | undefined;
    /** @since 1.5.1 */
    normalizeIterable?: (data: SortableIterable<TModel>, options: NormalizerOptions) => TNormalized[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository?: ['normalizeIterable'];
}
declare abstract class BaseJsonNormalizer<TModel, TNormalized = object> implements JsonNormalizer<TModel, TNormalized> {
    protected readonly _factory: Factory;
    constructor(factory: Factory);
    get factory(): Factory;
    abstract normalize(data: TModel, options: NormalizerOptions): TNormalized | undefined;
}
export declare class BomNormalizer extends BaseJsonNormalizer<Models.Bom> {
    normalize(data: Models.Bom, options: NormalizerOptions): Normalized.Bom;
}
export declare class MetadataNormalizer extends BaseJsonNormalizer<Models.Metadata> {
    normalize(data: Models.Metadata, options: NormalizerOptions): Normalized.Metadata;
}
export declare class ToolNormalizer extends BaseJsonNormalizer<Models.Tool> {
    normalize(data: Models.Tool, options: NormalizerOptions): Normalized.Tool;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Tool>, options: NormalizerOptions): Normalized.Tool[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Tool>, options: NormalizerOptions) => Normalized.Tool[];
}
export declare class HashNormalizer extends BaseJsonNormalizer<Models.Hash> {
    normalize([algorithm, content]: Models.Hash, options: NormalizerOptions): Normalized.Hash | undefined;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Hash>, options: NormalizerOptions): Normalized.Hash[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Hash>, options: NormalizerOptions) => Normalized.Hash[];
}
export declare class OrganizationalContactNormalizer extends BaseJsonNormalizer<Models.OrganizationalContact> {
    normalize(data: Models.OrganizationalContact, options: NormalizerOptions): Normalized.OrganizationalContact;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.OrganizationalContact>, options: NormalizerOptions): Normalized.OrganizationalContact[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.OrganizationalContact>, options: NormalizerOptions) => Normalized.OrganizationalContact[];
}
export declare class OrganizationalEntityNormalizer extends BaseJsonNormalizer<Models.OrganizationalEntity> {
    normalize(data: Models.OrganizationalEntity, options: NormalizerOptions): Normalized.OrganizationalEntity;
}
export declare class ComponentNormalizer extends BaseJsonNormalizer<Models.Component> {
    normalize(data: Models.Component, options: NormalizerOptions): Normalized.Component | undefined;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Component>, options: NormalizerOptions): Normalized.Component[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Component>, options: NormalizerOptions) => Normalized.Component[];
}
export declare class LicenseNormalizer extends BaseJsonNormalizer<Models.License> {
    #private;
    normalize(data: Models.License, options: NormalizerOptions): Normalized.License;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.License>, options: NormalizerOptions): Normalized.License[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.License>, options: NormalizerOptions) => Normalized.License[];
}
export declare class SWIDNormalizer extends BaseJsonNormalizer<Models.SWID> {
    normalize(data: Models.SWID, options: NormalizerOptions): Normalized.SWID;
}
export declare class ExternalReferenceNormalizer extends BaseJsonNormalizer<Models.ExternalReference> {
    normalize(data: Models.ExternalReference, options: NormalizerOptions): Normalized.ExternalReference | undefined;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.ExternalReference>, options: NormalizerOptions): Normalized.ExternalReference[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.ExternalReference>, options: NormalizerOptions) => Normalized.ExternalReference[];
}
export declare class AttachmentNormalizer extends BaseJsonNormalizer<Models.Attachment> {
    normalize(data: Models.Attachment, options: NormalizerOptions): Normalized.Attachment;
}
export declare class PropertyNormalizer extends BaseJsonNormalizer<Models.Property> {
    normalize(data: Models.Property, options: NormalizerOptions): Normalized.Property;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Property>, options: NormalizerOptions): Normalized.Property[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Property>, options: NormalizerOptions) => Normalized.Property[];
}
export declare class DependencyGraphNormalizer extends BaseJsonNormalizer<Models.Bom> {
    #private;
    normalize(data: Models.Bom, options: NormalizerOptions): Normalized.Dependency[] | undefined;
}
export {};
//# sourceMappingURL=normalize.d.ts.map