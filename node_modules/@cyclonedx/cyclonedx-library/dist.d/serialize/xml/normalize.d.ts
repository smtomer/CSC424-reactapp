/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
import type { SortableIterable } from '../../_helpers/sortable';
import * as Models from '../../models';
import type { Protocol as Spec } from '../../spec';
import type { NormalizerOptions } from '../types';
import type { SimpleXml } from './types';
export declare class Factory {
    #private;
    constructor(spec: Factory['spec']);
    get spec(): Spec;
    makeForBom(): BomNormalizer;
    makeForMetadata(): MetadataNormalizer;
    makeForComponent(): ComponentNormalizer;
    makeForTool(): ToolNormalizer;
    makeForOrganizationalContact(): OrganizationalContactNormalizer;
    makeForOrganizationalEntity(): OrganizationalEntityNormalizer;
    makeForHash(): HashNormalizer;
    makeForLicense(): LicenseNormalizer;
    makeForSWID(): SWIDNormalizer;
    makeForExternalReference(): ExternalReferenceNormalizer;
    makeForAttachment(): AttachmentNormalizer;
    makeForProperty(): PropertyNormalizer;
    makeForDependencyGraph(): DependencyGraphNormalizer;
}
interface XmlNormalizer<TModel, TNormalized> {
    normalize: (data: TModel, options: NormalizerOptions, elementName?: string) => TNormalized | undefined;
    /** @since 1.5.1 */
    normalizeIterable?: (data: SortableIterable<TModel>, options: NormalizerOptions, elementName: string) => TNormalized[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository?: ['normalizeIterable'];
}
declare abstract class BaseXmlNormalizer<TModel, TNormalized = SimpleXml.Element> implements XmlNormalizer<TModel, TNormalized> {
    protected readonly _factory: Factory;
    constructor(factory: Factory);
    get factory(): Factory;
    /**
     * @param elementName - element name. XML defines structures; the element's name is defined on usage of a structure.
     */
    abstract normalize(data: TModel, options: NormalizerOptions, elementName?: string): TNormalized | undefined;
}
export declare class BomNormalizer extends BaseXmlNormalizer<Models.Bom> {
    normalize(data: Models.Bom, options: NormalizerOptions): SimpleXml.Element;
}
export declare class MetadataNormalizer extends BaseXmlNormalizer<Models.Metadata> {
    normalize(data: Models.Metadata, options: NormalizerOptions, elementName: string): SimpleXml.Element;
}
export declare class ToolNormalizer extends BaseXmlNormalizer<Models.Tool> {
    normalize(data: Models.Tool, options: NormalizerOptions, elementName: string): SimpleXml.Element;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Tool>, options: NormalizerOptions, elementName: string): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Tool>, options: NormalizerOptions, elementName: string) => SimpleXml.Element[];
}
export declare class HashNormalizer extends BaseXmlNormalizer<Models.Hash> {
    normalize([algorithm, content]: Models.Hash, options: NormalizerOptions, elementName: string): SimpleXml.Element | undefined;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Hash>, options: NormalizerOptions, elementName: string): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Hash>, options: NormalizerOptions, elementName: string) => SimpleXml.Element[];
}
export declare class OrganizationalContactNormalizer extends BaseXmlNormalizer<Models.OrganizationalContact> {
    normalize(data: Models.OrganizationalContact, options: NormalizerOptions, elementName: string): SimpleXml.Element;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.OrganizationalContact>, options: NormalizerOptions, elementName: string): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.OrganizationalContact>, options: NormalizerOptions, elementName: string) => SimpleXml.Element[];
}
export declare class OrganizationalEntityNormalizer extends BaseXmlNormalizer<Models.OrganizationalEntity> {
    normalize(data: Models.OrganizationalEntity, options: NormalizerOptions, elementName: string): SimpleXml.Element;
}
export declare class ComponentNormalizer extends BaseXmlNormalizer<Models.Component> {
    normalize(data: Models.Component, options: NormalizerOptions, elementName: string): SimpleXml.Element | undefined;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Component>, options: NormalizerOptions, elementName: string): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Component>, options: NormalizerOptions, elementName: string) => SimpleXml.Element[];
}
export declare class LicenseNormalizer extends BaseXmlNormalizer<Models.License> {
    #private;
    normalize(data: Models.License, options: NormalizerOptions): SimpleXml.Element;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.License>, options: NormalizerOptions): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.License>, options: NormalizerOptions) => SimpleXml.Element[];
}
export declare class SWIDNormalizer extends BaseXmlNormalizer<Models.SWID> {
    normalize(data: Models.SWID, options: NormalizerOptions, elementName: string): SimpleXml.Element;
}
export declare class ExternalReferenceNormalizer extends BaseXmlNormalizer<Models.ExternalReference> {
    normalize(data: Models.ExternalReference, options: NormalizerOptions, elementName: string): SimpleXml.Element | undefined;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.ExternalReference>, options: NormalizerOptions, elementName: string): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.ExternalReference>, options: NormalizerOptions, elementName: string) => SimpleXml.Element[];
}
export declare class AttachmentNormalizer extends BaseXmlNormalizer<Models.Attachment> {
    normalize(data: Models.Attachment, options: NormalizerOptions, elementName: string): SimpleXml.Element;
}
export declare class PropertyNormalizer extends BaseXmlNormalizer<Models.Property> {
    normalize(data: Models.Property, options: NormalizerOptions, elementName: string): SimpleXml.Element;
    /** @since 1.5.1 */
    normalizeIterable(data: SortableIterable<Models.Property>, options: NormalizerOptions, elementName: string): SimpleXml.Element[];
    /** @deprecated use {@link normalizeIterable} instead of {@link normalizeRepository} */
    normalizeRepository: (data: SortableIterable<Models.Property>, options: NormalizerOptions, elementName: string) => SimpleXml.Element[];
}
export declare class DependencyGraphNormalizer extends BaseXmlNormalizer<Models.Bom> {
    #private;
    normalize(data: Models.Bom, options: NormalizerOptions, elementName: string): SimpleXml.Element | undefined;
}
export {};
//# sourceMappingURL=normalize.d.ts.map